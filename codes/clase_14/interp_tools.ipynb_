{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "revolutionary-perception",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Lk(xdatos, x, k):\n",
    "    L=1\n",
    "    for i in range(len(xdatos)):\n",
    "        if i!=k:\n",
    "            L = L*(x-xdatos[i])/(xdatos[k]-xdatos[i])\n",
    "    return L\n",
    "\n",
    "def interp_lagrange(x, xd, yd):\n",
    "    y = 0\n",
    "    for k in range(len(yd)):\n",
    "        y = y + yd[k]*Lk(xd, x, k)\n",
    "    return y\n",
    "\n",
    "def NDD(x, y):\n",
    "    \"\"\"Devuelve las diferencias divididas de Newton.\n",
    "\n",
    "    Args:\n",
    "    x : lista o array\n",
    "        Los valores de x\n",
    "    y : lista o array\n",
    "        Los valores de y\n",
    "    Returns:\n",
    "    NDD : array\n",
    "        Array con las diferencias divididas\n",
    "    \"\"\"\n",
    "    NDD = []\n",
    "    N = len(x)\n",
    "    M = np.zeros([N,N])\n",
    "    M[:,0] = y\n",
    "    \n",
    "    for columna in range(1,N):\n",
    "        for fila in range(N-columna):\n",
    "    \n",
    "            m = f\"M[{fila}, {columna}]\"\n",
    "    \n",
    "            ll = [m, f\"= (M[{fila+1},{columna-1}]\", '-', \n",
    "                     f\"M[{fila}, {columna-1}])\", '/',\n",
    "                     f\"(x[{fila+columna}] - x[{fila}])\", '\\n']\n",
    "            print(''.join(ll))\n",
    "    \n",
    "            num = M[fila+1, columna-1] - M[fila, columna-1] \n",
    "            den = x[fila+columna] - x[fila]\n",
    "            M[fila,columna] = num/den\n",
    "                                                                 \n",
    "    NDD = M[0,:]\n",
    "    return NDD\n",
    "\n",
    "def NDD_eval(x_sample, a, x):\n",
    "    \"\"\"Evaluar el polinomio interpolante.\n",
    "\n",
    "    Args:\n",
    "    a : array\n",
    "        Diferencias divididas\n",
    "    x_sample : list or array\n",
    "        Valores donde quiero evaluar al polinomio\n",
    "    x : list or array\n",
    "        Valores X interpolados\n",
    "    Returns:\n",
    "    y : list or array\n",
    "        Valores del polinomio en x\n",
    "    \"\"\"\n",
    "    N = len(dd)\n",
    "    print(f\"P = a[{N-1}]\")\n",
    "    for i in range(N-2, -1, -1):\n",
    "        print(f\"P = a[{i}] + p*(x-x[{i}])\")\n",
    "                                             \n",
    "    N = len(a)\n",
    "    y = []\n",
    "    for xx in x_sample:\n",
    "        p = a[N-1]\n",
    "        for i in range(N-2, -1, -1):\n",
    "            p = a[i] + p*(xx-x[i])\n",
    "        y.append(p)\n",
    "\n",
    "    return y\n",
    "\n",
    "def interp_newton(x, xd, xy):\n",
    "    dd = NDD(xd, yd)\n",
    "    y = NDD_eval(x, dd, xd)\n",
    "    return y\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
